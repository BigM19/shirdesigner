@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<DesignableProduct>

@using System.Web.Mvc.Html
@using System.Text.RegularExpressions
@using DotNetNuke.Web.Mvc.Helpers

@using Designer.Dnn.Designer.Models

@{
    ViewBag.Title = "Detail";
    Layout = null;
}


<div class="designer">
    <div class="button-container">

        <div class="upload-button">
            <form class="img-upload" action="@Url.Action("Detail", "DesignableProduct", new { id = Model.ItemId })" method="post" enctype="multipart/form-data">
                <input type="file" name="graphicFile" accept="image/*" />
                <button type="submit">Kép Feltöltése</button>
            </form>
        </div>

        <div class="show-button">
            <button id="btnShowImages">Kép Kiválasztása</button>
        </div>

        <div id="imagesModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close">&times;</span>
                </div>
                <div id="modal-body">
                    
                </div>
            </div>
        </div>

    </div>
    <div class="canvas-container">
        <img src="@Url.Content("~/desktopmodules/mvc/designer/Assets/ProductImages/"+ Model.ItemPic)" class="designable-shirt-img" alt="Design">

        <canvas id="my-canvas" width="280" height="400"></canvas>
    </div>
    <div class="description-container">
        <div class="description">
            <p>@Model.ItemDescription</p>
        </div>
        <div class="size-selector">
            <p class="sizes">Méretek:</p>
            @foreach (var size in Model.ItemSize.Split(','))
            {
                <input type="radio" id="@size" name="shirtSize" value="@size" />
                <label for="@size" >@size</label>
            }
        </div>
    </div>
</div>
<div class="footer">
    <div class="price-container">
        <p class="price">@Model.ItemPrice Ft</p>
    </div>
    <div class="order">
        <button>Megrendelés</button>
    </div>
</div>

<script>
    // Get the modal
    var modal = document.getElementById("imagesModal");

    // Get the button that opens the modal
    var btn = document.getElementById("btnShowImages");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks on the button, open the modal
    btn.onclick = function (event) {
        event.preventDefault();
        modal.style.display = "block";
        $('#modal-body').load('@Url.Action("GetUsableGraphics", "DesignableProduct")');
        openModal();
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function (event) {
        event.preventDefault();
        modal.style.display = "none";
        closeModal();
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
            closeModal();
        }
    }

    function openModal() {
        document.body.classList.add("body-no-scroll");
    }

    function closeModal() {
        document.body.classList.remove("body-no-scroll");
        var elements = document.querySelectorAll('#topHeader, header, footer');
        elements.forEach(function (el) {
            el.classList.remove('hidden'); // Remove the class to show the elements again
        });
    }
</script>

<script>
    const canvas = document.getElementById('my-canvas');
    let img = null;
    const ctx = canvas.getContext('2d');
    let offsetX = 0;
    let offsetY = 0;
    let scaledWidth = 0;
    let scaledHeight = 0;

    const resetCanvas = () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
        if (img) {
            ctx.drawImage(img, offsetX, offsetY, scaledWidth, scaledHeight);
        }
    }

    //Add image to canvas
    function imageClicked(src) {
        modal.style.display = "none";
        closeModal();
        img = new Image();
        img.src = src;
        img.onload = () => {
            scaleImageToFitCanvas();
        };
    }

    // Function to scale the image to fit the canvas
    function scaleImageToFitCanvas() {
        // Get the aspect ratio of the image
        const imgAspectRatio = img.width / img.height;
        // Get the aspect ratio of the canvas
        const canvasAspectRatio = canvas.width / canvas.height;

        // Determine whether to scale based on width or height by comparing aspect ratios
        if (imgAspectRatio > canvasAspectRatio) {
            // Image is wider in proportion to the canvas
            scaledWidth = canvas.width; // Use the full width of the canvas
            scaledHeight = scaledWidth / imgAspectRatio; // Adjust height to maintain aspect ratio
        } else {
            // Image is taller in proportion to the canvas
            scaledHeight = canvas.height; // Use the full height of the canvas
            scaledWidth = scaledHeight * imgAspectRatio; // Adjust width to maintain aspect ratio
        }

        offsetX = (canvas.width - scaledWidth) / 2; // Center image horizontally
        offsetY = (canvas.height - scaledHeight) / 2; // Center image vertically
        resetCanvas();
    }

    let draggable = false;

    canvas.onmousedown = (e) => {
        const clickX = e.layerX;
        const clickY = e.layerY;
        // Calculate middle position of the image
        const imageMiddleX = offsetX + scaledWidth / 2;
        const imageMiddleY = offsetY + scaledHeight / 2;
        // Check if the click occurred within the boundaries of the image
        if (clickX >= offsetX && clickX <= offsetX + scaledWidth && clickY >= offsetY && clickY <= offsetY + scaledHeight) {
            // Calculate offset from the middle of the image
            offsetX += clickX - imageMiddleX;
            offsetY += clickY - imageMiddleY;
            resetCanvas();
            draggable = true;
        }

        window.addEventListener('keydown', (e) => {
            if (e.key === 'Delete') {
                img = null;
                resetCanvas();
            }
        });
    }

    canvas.onmousemove = (e) => {
        if (draggable) {
            offsetX += e.movementX;
            offsetY += e.movementY;
            resetCanvas();
        }
    }
    canvas.onmouseup = (e) => {
        draggable = false;
    }
    canvas.onmouseout = (e) => {
        draggable = false;
    }
</script>


