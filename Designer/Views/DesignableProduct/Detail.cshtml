@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<DesignableProduct>

@using System.Web.Mvc.Html
@using System.Text.RegularExpressions
@using DotNetNuke.Web.Mvc.Helpers

@using Designer.Dnn.Designer.Models

@{
    ViewBag.Title = "Detail";
    Layout = null;

}


<div class="designer">
    <div class="button-container">
        <div class="return-button-container">
            <div class="return-button">
                <a href="@Url.Action("Index", "DesignableProduct")" id="backToIndex" class="design-btn">Vissza a póló választáshoz</a>
            </div>
        </div>
        <div class="canvas-buttons-container ">
            <div class="text-button">
                <button type="button" id="addText" class="design-btn custom-btn">Szöveg hozzáadása</button>
            </div>

            <div class="upload-button">
                <form class="img-upload" action="@Url.Action("Detail", "DesignableProduct", new { id = Model.ItemId })" method="post" enctype="multipart/form-data">
                    <input type="file" name="graphicFile" accept="image/*" />
                    <button type="submit" class="design-btn custom-btn">Kép Feltöltése</button>
                </form>
            </div>

            <div class="show-button">
                <button type="button" id="btnShowImages" class="design-btn custom-btn">Kép Kiválasztása</button>
            </div>
        </div>

        <div id="imagesModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close">&times;</span>
                </div>
                <div id="modal-body">
                    
                </div>
            </div>
        </div>

    </div>
    <div id="canvas-container" class="canvas-container">
        <img src="@Url.Content("~/desktopmodules/mvc/designer/Assets/ProductImages/"+ Model.ItemPic)" id="background-image" class="designable-shirt-img" alt="Design" width="600" height="600">

        <canvas id="my-canvas" width="280" height="400"></canvas>
    </div>
    <div class="description-container">
        <div class="description">
            <p>@Model.ItemDescription</p>
        </div>
        <div class="size-selector">
            <p class="sizes">Méretek:</p>
            @foreach (var size in Model.ItemSize.Split(','))
            {
                <input type="radio" id="@size" name="shirtSize" value="@size" />
                <label for="@size" >@size</label>
            }
        </div>
    </div>
</div>
<div class="footer">
    <button type="button" onclick="mergeAndSaveCanvas()">Save Design</button>
    <div class="price-container">
        <p class="price">@Model.ItemPrice Ft</p>
    </div>
    <div class="order">
        <button>Megrendelés</button>
    </div>
</div>

<script>
    // Get the modal
    var modal = document.getElementById("imagesModal");

    // Get the button that opens the modal
    var btn = document.getElementById("btnShowImages");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks on the button, open the modal
    btn.onclick = function (event) {
        event.preventDefault();
        modal.style.display = "block";
        $('#modal-body').load('@Url.Action("GetUsableGraphics", "DesignableProduct")');
        openModal();
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function (event) {
        event.preventDefault();
        modal.style.display = "none";
        closeModal();
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
            closeModal();
        }
    }

    function openModal() {
        document.body.classList.add("body-no-scroll");
    }

    function closeModal() {
        document.body.classList.remove("body-no-scroll");
        var elements = document.querySelectorAll('#topHeader, header, footer');
        elements.forEach(function (el) {
            el.classList.remove('hidden'); // Remove the class to show the elements again
        });
    }
</script>

<script src="~/desktopmodules/mvc/designer/Scripts/shirtdesigner.js"></script>

<script>
    //Return confirmation
    document.getElementById('backToIndex').addEventListener('click', function (event) {
        event.preventDefault(); // Prevent the link from navigating immediately
        var confirmLeave = confirm("Biztosan vissza akarsz térni a póló választáshoz?");
        if (confirmLeave) {
            window.location.href = this.href; // If confirmed, proceed to the link's href
        }
    });
</script>

<script>
    //Save merged image
    function mergeAndSaveCanvas() {
        const offScreenCanvas = document.createElement('canvas');
        const offCtx = offScreenCanvas.getContext('2d');

        const backgroundImage = document.getElementById('background-image');
        // Assuming backgroundImage is loaded and available
        offScreenCanvas.width = backgroundImage.width;
        offScreenCanvas.height = backgroundImage.height;

        // Draw the background image first
        offCtx.drawImage(backgroundImage, 0, 0);

        // Then draw the display canvas content over it
        const displayCanvas = document.getElementById('my-canvas');
        const startX = 160;  // Calculated X coordinate
        const startY = 100;  // Calculated Y coordinate
        offCtx.drawImage(displayCanvas, startX, startY);

        // Export to Image
        const dataURL = offScreenCanvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.href = dataURL;
        link.download = 'final_design.png';
        link.click();
    }

</script>

